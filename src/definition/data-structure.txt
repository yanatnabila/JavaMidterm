***ANSWER ALL QUESTIONS BELOW***

Why do we need data structure?
Answer:Data structures are utilized as a system for arranging and putting away data in virtual memory structures.
Data structures sort out and organize data into datasets and databases that can be packed effectively to spare extra room.
These hierarchical structures are likewise organized coherently so that recovering data from them is basic and direct,
making the data usable again.  Some of these include Heaps, Linked Lists, Queues, Stacks,Bags,Binary Trees etc.

What are the various operations that can be performed on different data structures?
Answer:Design of efficient data structure must take operations to be performed on the data structures into account. The most commonly used operations on data structure are broadly categorized into following types

       Create:- The create operation results in reserving memory for program elements. This can be done by declaration statement. Creation of data structure may take place either during compile-time or run-time. malloc() function of C language is used for creation.
       Destroy:- Destroy operation destroys memory space allocated for specified data structure. free() function of C language is used to destroy data structure.
       Selection:- Selection operation deals with accessing a particular data within a data structure.
       Updation:- It updates or modifies the data in the data structure.
       Searching:- It finds the presence of desired data item in the list of data items, it may also find the locations of all elements that satisfy certain conditions.
       Sorting:- Sorting is a process of arranging all data items in a data structure in a particular order, say for example, either in ascending order or in descending order.
       Merging:- Merging is a process of combining the data items of two different sorted list into a single sorted list.
       Splitting:- Splitting is a process of partitioning single list to multiple list.
       Traversal:- Traversal is a process of visiting each and every node of a list in systematic manner.


When would we use data structures in the real world?
Answer:

What is an Array?
Answer:An array is data structure (type of memory layout) that stores a collection of individual values that are of the same data type. Arrays are useful because instead of having to separately store related information in different variables (named memory locations), you can store them—as a collection—in just one variable. It is more efficient for a program to access and process the information in an array, than it is to deal with many separate variables.

What is the difference between Array and ArrayList?
Answer:Arrays are static whereas ArrayLists are dynamic
       Arrays are not resizable, ArrayLists are resizable
       Arrays can contain primitive data types, ArrayLists can not contian promitive types but we can use their wrapper classes whenever required.
       Arrays are very fast when inserting the new elements, ArrayLists are bit slow when inserting new elements because it has to resize when it exceeds it max limit since its growable array
       Arrays are a bit slow when retrieving the elements from it, search operation is fact in ArrayLists
       The size of array we can et it by length property, Size of arraylist we can get it by size() method.

What is a LinkedList?
Answer:A linked list is a sequence of data structures, which are connected together via links.
       Linked List is a sequence of links which contains items. Each link contains a connection to another link. Linked list is the second most-used data structure after array. Following are the important terms to understand the concept of Linked List.
       Link − Each link of a linked list can store a data called an element.
       Next − Each link of a linked list contains a link to the next link called Next.
       LinkedList − A Linked List contains the connection link to the first link called First.
       Linked List contains a link element called first.

       Each link carries a data field(s) and a link field called next.
       Each link is linked with its next link using its next link.
       Last link carries a link as null to mark the end of the list.

       Types of Linked List
       Following are the various types of linked list.
       Simple Linked List − Item navigation is forward only.
       Doubly Linked List − Items can be navigated forward and backward.
       Circular Linked List − Last item contains link of the first element as next and the first element has a link to the last element as previous.

How is an Array different from LinkedList?
Answer:Array is a datatype which is widely implemented as a default type, in almost all the modern programming languages, and is used to store data of similar type.
But there are many use cases, like the one where we don't know the quantity of data to be stored, for which advanced data structures are required, and one such data structure is linked list.
-Array is a collection of elements of similar data type. Linked List is an ordered collection of elements of same type, which are connected to each other using pointers.
-Array supports Random Access, which means elements can be accessed directly using their index, like arr[0] for 1st element, arr[6] for 7th element etcHence, accessing elements in an array is fast with a constant time complexity of O(1)..Linked List supports Sequential Access, which means to access any element/node in a linked list, we have to sequentially traverse the complete linked list, upto that element.
To access nth element of a linked list, time complexity is O(n).
-In an array, elements are stored in contiguous memory location or consecutive manner in the memory.In a linked list, new elements can be stored anywhere in the memory.
 Address of the memory location allocated to the new element is stored in the previous node of linked list, hence formatting a link between the two nodes/elements.
-In array, Insertion and Deletion operation takes more time, as the memory locations are consecutive and fixed.In case of linked list, a new element is stored at the first free and available memory location, with only a single overhead step of storing the address of memory location in the previous node of linked list.
Insertion and Deletion operations are fast in linked list.
Memory is allocated as soon as the array is declared, at compile time. It's also known as Static Memory Allocation.Memory is allocated at runtime, as and when a new node is added. It's also known as Dynamic Memory Allocation.
-In array, each element is independent and can be accessed using it's index value./ In case of a linked list, each node/element points to the next, previous, or maybe both nodes.
-Array can be single dimensional, two dimensional or multidimensional./ Linked list can be Linear(Singly) linked list, Doubly linked list or Circular linked list linked list.
-Size of the array must be specified at time of array decalaration./ Size of a Linked list is variable. It grows at runtime, as more nodes are added to it.
-Array gets memory allocated in the Stack section./Whereas, linked list gets memory allocated in Heap section.

What is a Queue?
Answer:The queue interface is provided in java.util package and it implements the Collection interface. The queue implements FIFO i.e. First In First Out. This means that the elements entered first are the ones that are deleted first.

What is a Stack (not Java memory - refers to data structure)?
Answer:A Stack is a linear data structure that follows the LIFO (Last-In-First-Out) principle. Stack has one end, whereas the Queue has two ends (front and rear). It contains only one pointer top pointer pointing to the topmost element of the stack. Whenever an element is added in the stack, it is added on the top of the stack, and the element can be deleted only from the stack. In other words, a stack can be defined as a container in which insertion and deletion can be done from the one end known as the top of the stack.

What is FIFO and LIFO?
Answer:FIFO is an abbreviation for first in, first out. It is a method for handling data structures where the first element is processed first and the newest element is processed last.
LIFO is an abbreviation for Last in, first out is same as first in, last out (FILO). It is a method for handling data structures where the last element is processed first and the first element is processed last.

Explain Big O Notation?
Answer:The Big O notation defines an upper bound of an algorithm, it bounds a function only from above. For example, consider the case of Insertion Sort. It takes linear time in best case and quadratic time in worst case. We can safely say that the time complexity of Insertion sort is O(n^2). Note that O(n^2) also covers linear time.
       The general step wise procedure for Big-O runtime analysis is as follows:
       Figure out what the input is and what n represents.
       Express the maximum number of operations, the algorithm performs in terms of n.
       Eliminate all excluding the highest order terms.
       Remove all the constant factors.
       Some of the useful properties on Big-O notation analysis are as follow:

       Constant Multiplication:
       If f(n) = c.g(n), then O(f(n)) = O(g(n)) ; where c is a nonzero constant.
       Polynomial Function:
       If f(n) = a0 + a1.n + a2.n2 + —- + am.nm, then O(f(n)) = O(nm).
       Summation Function:
       If f(n) = f1(n) + f2(n) + —- + fm(n) and fi(n)≤fi+1(n) ∀ i=1, 2, —-, m,
       then O(f(n)) = O(max(f1(n), f2(n), —-, fm(n))).
       Logarithmic Function:
       If f(n) = logan and g(n)=logbn, then O(f(n))=O(g(n))
       ; all log functions grow in the same manner in terms of Big-O.

 Basically, this asymptotic notation is used to measure and compare the worst-case scenarios of algorithms theoretically. For any algorithm, the Big-O analysis should be straightforward as long as we correctly identify the operations that are dependent on n, the input size.
Orders of magnitude is YET ANOTHER mathematical term which basically tells the difference between classes of numbers. Think the difference between 10 and 100. If you picture 10 of your closest friends and 100 people, that's a really big difference. Similarly, the difference between 1,000 and 10,000 is pretty big (in fact, its the difference between a junker car and a lightly used one). It turns out that in approximation, as long as you're within an order of magnitude, you're pretty close.

What is the best case to search an element from an array?
Answer:
for (i = 0; i < a.length-1; i++) {
  if (a[i] < a[i + 1]) {
    return true;
  } else {
    return false;
  }
}
What is the worst case to search an element from an array?
Answer:In the worst case analysis, we calculate upper bound on running time of an algorithm. We must know the case that causes maximum number of operations to be executed. For Linear Search, the worst case happens when the element to be searched (x in the above code) is not present in the array. When x is not present, the search() functions compares it with all the elements of arr[] one by one. Therefore, the worst case time complexity of linear search would be Θ(n).

Describe what a tree data structure is?
Answer:The data structure includes all forms of data from data management, data organization, and data storage so that proper access is given to the users who use the data for their business. All forms of data are collected and managed, relationships are maintained between them, and the operations related to data are carried out. The data can also be retrieved from the storage space. The basis of any data structure is to arrange data very well. The data can be accessed and worked appropriately in different ways. The two main structures are array and linked data structure.

Describe what a graph data structure is?
Answer:A graph is a data structure for storing connected data like a network of people on a social media platform.

       A graph consists of vertices and edges. A vertex represents the entity (for example, people) and an edge represents the relationship between entities (for example, a person's friendships).

What is the difference between the HashTable and HashMap?
Answer:1) HashMap is non synchronized. It is not-thread safe and can't be shared between many threads without proper synchronization code./Hashtable is synchronized. It is thread-safe and can be shared with many threads.
2) HashMap allows one null key and multiple null values./Hashtable doesn't allow any null key or value.
3) HashMap is a new class introduced in JDK 1.2./ Hashtable is a legacy class.
4) HashMap is fast./ Hashtable is slow.
5) We can make the HashMap as synchronized by calling this code Map m = Collections.synchronizedMap(hashMap);/ Hashtable is internally synchronized and can't be unsynchronized.
6) HashMap is traversed by Iterator.	Hashtable is traversed by Enumerator and Iterator.
7) Iterator in HashMap is fail-fast.	Enumerator in Hashtable is not fail-fast.
8) HashMap inherits AbstractMap class.	Hashtable inherits Dictionary class.

What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model
Answer:
· RDBMS – Array (i.e. Array of structures)

· Network data model – Graph

· Hierarchical data model – Trees

How do HashMaps work in Java? How do they store values, and when are they useful?
Answer:
HashMap is a part of the Java collection framework. It uses a technique called Hashing. It implements the map interface. It stores the data in the pair of Key and Value. HashMap contains an array of the nodes, and the node is represented as a class. It uses an array and LinkedList data structure internally for storing Key and Value
What is ArrayIndexOutOfBoundsException in java? When does it occur?
Answer:The ArrayIndexOutOfBoundsException is a subclass of IndexOutOfBoundsException, and it implements the Serializable interface.
The ArrayIndexOutOfBoundsException occurs whenever we are trying to access any item of an array at an index which is not present in the array. In other words, the index may be negative or exceed the size of an array.

What are the different ways of copying an array into another array?
-Copying element by element − One way is to create an empty array with the length of the original array, and copy each element (in a loop).
-Using the clone() method − The clone() method of the class java.lang.Object accepts an object as a parameter, creates and returns a copy of it.
-Using the System.arraycopy() method − The copy() method of the System class accepts two arrays (along with other details) and copies the contents of one array to other.

What is DFS and BFS?
Answer:BFS is an algorithm that is used to graph data or searching tree or traversing structures. The algorithm efficiently visits and marks all the key nodes in a graph in an accurate breadthwise fashion.
       This algorithm selects a single node (initial or source point) in a graph and then visits all the nodes adjacent to the selected node. Once the algorithm visits and marks the starting node, then it moves towards the nearest unvisited nodes and analyses them.
       Once visited, all nodes are marked. These iterations continue until all the nodes of the graph have been successfully visited and marked. The full form of BFS is the Breadth-first search.
DFS is an algorithm for finding or traversing graphs or trees in depth-ward direction. The execution of the algorithm begins at the root node and explores each branch before backtracking. It uses a stack data structure to remember, to get the subsequent vertex, and to start a search, whenever a dead-end appears in any iteration. The full form of DFS is Depth-first search.

What is Recursion?
Answer:Recursion is the technique of making a function call itself. This technique provides a way to break complicated problems down into simple problems which are easier to solve.

What are linear and non-linear data Structures?
Answer:A linear data structure is a data structure that has data elements in sequential order. In a linear data structure, the adjacent elements are attached to each other. However, these data structures do not make better utilization of memory. Therefore, it can lead to memory wastage.
       Array, Linked List, Stack, and Queue are some common examples of linear data structures. An array stores data elements of the same data type. A linked list is a data structure that contains a set of nodes; each node stores data and address of another node. These nodes connect together to form a structure similar to a chain.
A stack is an abstract data type that behaves similarly to a real-world stack. It follows LIFO (Last in First Out) order. In other words, the inserted last element is in the top of the stack. Therefore, the element to access the first is the last inserted element. Moreover, inserting elements to the stack is called push operation and removing elements from the stack is called pop operation.
A queue is also an abstract data structure, but it has two ends to insert elements and to delete elements. Inserting elements is called enqueue and removing elements is called dequeue.
Non Linear data structure stores data in a non-sequential manner. It forms a hierarchical relationship among the child elements and parent elements. In other words, the data items are attached to each other creating a relationship between them. It is not possible to insert elements, delete elements or go through the elements in sequential order. Usually, these data structures are more memory efficient.
Trees and graphs are the most common nonlinear data structures. A tree data structure represents the nodes connected by edges. A binary tree is a tree data structure.  Every node in the binary tree can have a maximum of two children.

Outline different sorting algorithms and their time complexities:
The time complexity of an algorithm signifies the total time required by the program to complete its operations or execution. It is commonly expressed using the big O notation. The time complexity is very important factor in deciding whether an algorithm is efficient or not.
The estimation of a time complexity is based on the number of elementary functions performed by an algorithm. We usually consider the worst case time complexity of an algorithm as it is the maximum time taken for any input size.
Time Complexity: Time Complexity is defined as the number of times a particular instruction set is executed rather than the total time is taken. It is because the total time taken also depends on some external factors like the compiler used, processor’s speed, etc.
Space Complexity: Space Complexity is the total memory space required by the program for its execution.
Both are calculated as the function of input size(n).in spite of these parameters the efficiency of an algorithm also depends upon the nature and size of the input.

Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a) In terms of Accessing elements:
  b) In terms of Inserting elements:
  c) In terms of Searching elements:
  d) In terms of Removing elements: