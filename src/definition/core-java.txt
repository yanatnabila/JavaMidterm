***ANSWER ALL QUESTIONS BELOW***

What is a programming language?
Answer:A programming language is used to write computer programs including applications, utilities, and systems programs.
 Before the Java and C# programming languages appeared, computer programs were either compiled or interpreted.
 A compiled program is written as a series of humanly understandable computer instructions that can be read by a compiler and linker and translated into machine code so that a computer can understand and run it. Fortran, Pascal, Assembly Language, C, and C++ programming languages are almost always compiled in this way. Other programs, such as Basic, JavaScript, and VBScript, are interpreted

What is a JDK composed of? Define each components?
Answer:What jdk contains or composed of and define each component? JAVA Development Kit is a Software development environment used to develop java applications and applets it contains:
       Java Archive (jar), Java Compiler (javac), Java Disassembler (Javap), Java Debugger (jdb) , Java HeaderFile Generator (javah), Documentation (javadoc) and many others. We will look into some of the most used tool in this article.
       JRE: (Java Runtime Environment) it is the on disk System that takes JAVA code, combines it with the needed libraries and software JRE is a part of JDK but can be downloaded separately.
       JRE: Java Runtime Environment
       java: It’s simply a loader that works for all the java applications. Also, this particular tool interprets the class file generated by javac. The single java launcher is used for the purpose of development and deployment. Gone are the days when JRE was used as the deployment launcher. Nowadays, JRE doesn’t exist with the Sun JDK and totally replaced by this new java loader.
       javac: It’s a compiler. And, basically, it converts source code into Java bytecode
       appletviewer: Through this component, we can run the Java applets without taking the help of a web browser and even debug them.
       apt: This is used as an annotation-processing tool
       extcheck: For identifying the conflicts, this next check is used
       idlj: An IDL-to-Java compiler used to generate Java bindings from the provided Java IDL file
       jabswitch: It is a Java Access Bridge
       javadoc: It is a documentation generator, which produces documentation from source code comments, automatically
       jar: It is an archiver. Along with related class libraries packages into one JAR file. Also, it manages those files
       javafxpackager: It is a tool to attain packages and sign JavaFX applications
       jarsigner: It’s a verification and jar signing tool
       javah: It’s a stub generator and ‘C’ header that is used for writing built-in methods
       javap: It’s a class file disassembler
       javaws: It’s a Java Web Start launcher for JNLP applications
       JConsole: It’s a Console used for Java Monitoring and Management
       jdb: It’s a debugger
       jhat: It’s a Java Heap Analysis Tool (experimental)
       jinfo: It particularly used to get the configuration information from a running Java process
       jmap: It’s an Oracle jmap which is also a Memory Map. This gives the result of the memory map for Java. On the other hand, it is useful in printing heap memory, or shared object memory maps details of a particular core dump or process.
       jmc: It’s known as a Java Mission Control
       jps: it’s a JVM Process, Status Tool. It is capable of listing the instrumented HotSpot JVMs on the target system
       jrunscript: It’s a Java command-line script shell
       jstack: A tool prints Java stack traces of Java threads
       jstat: Java Virtual Machine statistic monitoring tool
       keytool: A tool for manipulating the Keystore
       pack200: JAR compression tool
       Policytool: Utility that determines the Java runtime. That means it is a policy creation and management tool.
       VisualVM: It’s a visual tool. It is integrated with numerous command-line JDK tools.
       wsimport: It produces portable JAX-WS artifacts with an aim to invoke a web service
       xjc: It’s the part of the Java API boosting the XML Binding (JAXB) API. After accepting the XML schema, it generates Java classes


What is an IDE?
Answer:IDE (Integrated Development Environment) is a software application that enables users to write and debug Java programs more easily.
Most IDEs have features such as syntax highlighting and code completion that helps users to code more easily. Usually, Java IDEs include a code editor, a compiler, a debugger, and an interpreter that the developer may access via a single graphical user interface. Java IDEs also provide language-specific elements such as Maven, Ant building tools, Junit, and TestNG for testing.
The Java IDE or Integrated Development Environment provides considerable support for the application development process. Through using them, we can save time and effort and set up a standard development process for the team or company. Eclipse, NetBeans, IntelliJ IDEA, and many other IDE's are most popular in the Java IDE's that can be used according to our requirements. In this topic, we will discuss the best Java IDE's that are used by the users.

What are some of the most popular Java IDEs available in the market?
Answer:Eclipse, NetBeans, IntelliJ IDEA, BlueJ, JCreator, JDeveloper, MyEclipse, Greenfoot, DrJava, Xcode, Codenvy.

Explain the entire java life cycle.
Answer:We can use any text editor to create the high-level Java text file. This file is saved as a .java file on the disk.
We then compile this text file using the Java compiler, which results in a .class file being created on the disk.
The .class file contains the bytecodes. The file is then loaded into memory by the class loader.
The bytecode verifier confirms that the bytecodes are valid and not hostile. Finally,
the JVM reads the bytecodes in memory and translates them into machine code.

What is a class?
Answer: a class is a Blueprint, a collection of methods and instructions of how to create an object. A method should be inside the class.
All JAVA code is defined in a class. a class is a compiled from a .java file.,it behaves like a template,it is used to create object instances and it declares methods.

What is an object?
Answer:

What is the entry point of an application?
Answer:

Why is the main() static?
Answer:

Which class is the superclass of all classes?
Answer:

What is difference between path and classpath variables?
Answer:

What is the difference between an Interface and Abstract class?
Answer:

Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer:

What is Access Modifier?
Answer:

What is OOP? Define each OOP concept.
Answer:

What is Java Package and which package is imported by default?
Answer:

What is an API? List some API's that you have used so far.
Answer:

Does java support multiple inheritance? Why or why not?
Answer:

What is method overloading and when does it happen?
Answer:

Explain exceptions in java and how to handle them.
Answer:

What is static keyword? When and how do we use it?
Answer:

What is final keyword? When and how do we use it?
Answer:

Explain the difference between final, finally and finalize?
Answer:

What is a constructor?
Answer:

Can we have multiple constructors in a class?
Answer:

If we don't have a constructor declared, what is called during the object creation?
Answer:

What is "this" keyword in Java? When would we use it?
Answer:

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:

What does JVM stand for?
Answer:

Is JVM platform independent?
Answer:

What version of Java are you using?
Answer:

What does JAR stand for?
Answer:

What is the difference between JDK and JVM?
Answer:

What is the difference between JVM and JRE?
Answer:

Explain the difference between compile-time and run-time?
Answer:

What is heap?
Answer:

How does Java manage its memory?
Answer:

What is the difference between String, StringBuffer and StringBuilder?
Answer:

What is Singleton class?
Answer:

What is Serialization and Deserialization?
Answer:

Explain the difference between While and Do..While loops?
Answer:

What is Enum?
Answer:

What is Iterator?
Answer:

Which one will take more memory: an int or Integer? Why?
Answer:

Why are Strings considered to be immutable in Java?
Answer:

What is constructor chaining in Java?
Answer:

The difference between Serial and Parallel Garbage Collector?
Answer:

What does JIT stands for?
Answer:

Explain the process of Java garbage collection?
Answer:

Can you guarantee the garbage collection process?
Answer:

What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer: