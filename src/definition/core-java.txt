***ANSWER ALL QUESTIONS BELOW***

What is a programming language?
Answer:A programming language is used to write computer programs including applications, utilities, and systems programs.
 Before the Java and C# programming languages appeared, computer programs were either compiled or interpreted.
 A compiled program is written as a series of humanly understandable computer instructions that can be read by a compiler and linker and translated into machine code so that a computer can understand and run it. Fortran, Pascal, Assembly Language, C, and C++ programming languages are almost always compiled in this way. Other programs, such as Basic, JavaScript, and VBScript, are interpreted

What is a JDK composed of? Define each components?
Answer:What jdk contains or composed of and define each component? JAVA Development Kit is a Software development environment used to develop java applications and applets it contains:
       Java Archive (jar), Java Compiler (javac), Java Disassembler (Javap), Java Debugger (jdb) , Java HeaderFile Generator (javah), Documentation (javadoc) and many others. We will look into some of the most used tool in this article.
       JRE: (Java Runtime Environment) it is the on disk System that takes JAVA code, combines it with the needed libraries and software JRE is a part of JDK but can be downloaded separately.
       JRE: Java Runtime Environment
       java: It’s simply a loader that works for all the java applications. Also, this particular tool interprets the class file generated by javac. The single java launcher is used for the purpose of development and deployment. Gone are the days when JRE was used as the deployment launcher. Nowadays, JRE doesn’t exist with the Sun JDK and totally replaced by this new java loader.
       javac: It’s a compiler. And, basically, it converts source code into Java bytecode
       appletviewer: Through this component, we can run the Java applets without taking the help of a web browser and even debug them.
       apt: This is used as an annotation-processing tool
       extcheck: For identifying the conflicts, this next check is used
       idlj: An IDL-to-Java compiler used to generate Java bindings from the provided Java IDL file
       jabswitch: It is a Java Access Bridge
       javadoc: It is a documentation generator, which produces documentation from source code comments, automatically
       jar: It is an archiver. Along with related class libraries packages into one JAR file. Also, it manages those files
       javafxpackager: It is a tool to attain packages and sign JavaFX applications
       jarsigner: It’s a verification and jar signing tool
       javah: It’s a stub generator and ‘C’ header that is used for writing built-in methods
       javap: It’s a class file disassembler
       javaws: It’s a Java Web Start launcher for JNLP applications
       JConsole: It’s a Console used for Java Monitoring and Management
       jdb: It’s a debugger
       jhat: It’s a Java Heap Analysis Tool (experimental)
       jinfo: It particularly used to get the configuration information from a running Java process
       jmap: It’s an Oracle jmap which is also a Memory Map. This gives the result of the memory map for Java. On the other hand, it is useful in printing heap memory, or shared object memory maps details of a particular core dump or process.
       jmc: It’s known as a Java Mission Control
       jps: it’s a JVM Process, Status Tool. It is capable of listing the instrumented HotSpot JVMs on the target system
       jrunscript: It’s a Java command-line script shell
       jstack: A tool prints Java stack traces of Java threads
       jstat: Java Virtual Machine statistic monitoring tool
       keytool: A tool for manipulating the Keystore
       pack200: JAR compression tool
       Policytool: Utility that determines the Java runtime. That means it is a policy creation and management tool.
       VisualVM: It’s a visual tool. It is integrated with numerous command-line JDK tools.
       wsimport: It produces portable JAX-WS artifacts with an aim to invoke a web service
       xjc: It’s the part of the Java API boosting the XML Binding (JAXB) API. After accepting the XML schema, it generates Java classes


What is an IDE?
Answer:IDE (Integrated Development Environment) is a software application that enables users to write and debug Java programs more easily.
Most IDEs have features such as syntax highlighting and code completion that helps users to code more easily. Usually, Java IDEs include a code editor, a compiler, a debugger, and an interpreter that the developer may access via a single graphical user interface. Java IDEs also provide language-specific elements such as Maven, Ant building tools, Junit, and TestNG for testing.
The Java IDE or Integrated Development Environment provides considerable support for the application development process. Through using them, we can save time and effort and set up a standard development process for the team or company. Eclipse, NetBeans, IntelliJ IDEA, and many other IDE's are most popular in the Java IDE's that can be used according to our requirements. In this topic, we will discuss the best Java IDE's that are used by the users.

What are some of the most popular Java IDEs available in the market?
Answer:Eclipse, NetBeans, IntelliJ IDEA, BlueJ, JCreator, JDeveloper, MyEclipse, Greenfoot, DrJava, Xcode, Codenvy.

Explain the entire java life cycle.
Answer:We can use any text editor to create the high-level Java text file. This file is saved as a .java file on the disk.
We then compile this text file using the Java compiler, which results in a .class file being created on the disk.
The .class file contains the bytecodes. The file is then loaded into memory by the class loader.
The bytecode verifier confirms that the bytecodes are valid and not hostile. Finally,
the JVM reads the bytecodes in memory and translates them into machine code.

What is a class?
Answer: a class is a Blueprint, a collection of methods and instructions of how to create an object. A method should be inside the class.
All JAVA code is defined in a class. a class is a compiled from a .java file.,it behaves like a template,it is used to create object instances and it declares methods.

What is an object?
Answer:It is an instance of a class, an entity that has state and behavior. an object has 3 characteristics:
State: represents the data (value) of an object.
Behavior: represents the behavior (functionality) of an object such as deposit, withdraw, etc.
Identity: An object identity is typically implemented via a unique ID. The value of the ID is not visible to the external user.
However, it is used internally by the JVM to identify each object uniquely.

What is the entry point of an application?
.
Answer:If you have an application bundled in a JAR file, you need some way to indicate which class within the
JAR file is your application's entry point. You provide this information with the Main-Class header in the manifest,
which has the general form:  Main-Class: classname
The value classname is the name of the class that is your application's entry point.Recall that the entry point is a class having a method
with signature public static void main(String[] args).
After you have set the Main-Class header in the manifest, you then run the JAR file using the following form of the java command:
 java -jar JAR-name
 The main method of the class specified in the Main-Class header is executed

Why is the main() static?
Answer:  Whenever there is a static keyword besides a variable or function, it belongs to the class itself. A static variable is initialized at the commencing of the program, and only a one-time declaration is required. Only one copy of the variable is shared among all the instances of the class.
       members are shared with all instances of the classes. Whenever a static keyword is applied, it signifies it doesn’t require any instance to access the variable and function, it can be accessed directly by the class itself.

Which class is the superclass of all classes?
Answer:Object class (Java.lang.Object class is the root or superclass of the class hierarchy, which is present in java.lang package. All predefined classes and user-defined classes are the subclasses from Object class.)

What is difference between path and classpath variables?
Answer:path variable is used to set the path for all Java software tools like javac.exe, java.exe, javadoc.exe, and so on.
classpath variable is used to set the path for java classes.

What is the difference between an Interface and Abstract class?
Answer:
Abstract class and interface both are used to achieve abstraction where we can declare the abstract methods.
 they both can't be instantiated. but
1) Abstract class can have abstract and non-abstract methods.
Interface can have only abstract methods. Since Java 8, it can have default and static methods also.
2) Abstract class doesn't support multiple inheritance.
Interface supports multiple inheritance.
3) Abstract class can have final, non-final, static and non-static variables.
Interface has only static and final variables.
4) Abstract class can provide the implementation of interface.
Interface can't provide the implementation of abstract class.
5) The abstract keyword is used to declare abstract class.
The interface keyword is used to declare interface.
6) An abstract class can extend another Java class and implement multiple Java interfaces.
An interface can extend another Java interface only.
7) An abstract class can be extended using keyword "extends".
An interface can be implemented using keyword "implements".
8) A Java abstract class can have class members like private, protected, etc.
Members of a Java interface are public by default.

What is Access Modifier?
Answer:The access modifiers in Java specifies the accessibility or scope of a field, method, constructor, or class.
We can change the access level of fields, constructors, methods, and class by applying the access modifier on it.
There are four types of Java access modifiers:
  1-Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.
  2-Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default.
  3-Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.
  4-Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package.

What is OOP? Define each OOP concept.
Answer:Object-Oriented Programming is a paradigm that provides many concepts, such as inheritance, data binding, polymorphism, etc.
The main aim of object-oriented programming is to implement real-world entities, for example, object, classes, abstraction, inheritance, polymorphism, etc.
 -Simula is considered the first object-oriented programming language. The programming paradigm where everything is represented as an object is known as a truly object-oriented programming language.
 -Smalltalk is considered the first truly object-oriented programming language.
 -The popular object-oriented languages are Java, C#, PHP, Python, C++, et
Object means a real-world entity such as a pen, chair, table, computer, watch, etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:
-Object:Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical.
 An Object can be defined as an instance of a class. An object contains an address and takes up some space in memory. Objects can communicate without knowing the details of each other's data or code. The only necessary thing is the type of message accepted and the type of response returned by the objects.
-Class:Collection of objects is called class. It is a logical entity.
 A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space.
-Inheritance:When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.
-Polymorphism: If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.
-Abstraction: Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.
-Encapsulation:Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines.

What is Java Package and which package is imported by default?
Answer:In Java, the package is the collection of Java classes and interfaces. When we use the classes of a particular package, we need to import that particular package in which that classes are defined. The class uses the fully qualified name that includes the package name. In most of the basic Java programs, we do not import any package.
JVM internally imports java.lang.package by default. It provides the fundamental classes that are necessary to design a basic Java program. The important classes are Object, which is the root of the class hierarchy, and Class, instances of which represent classes at run time.

What is an API? List some API's that you have used so far.
Answer:An API can be described as a way to enable computers to possess a common interface, to allow them to communicate with each other.
Java Application Programming Interface (API) is the area of Java development kit (JDK). An API includes classes, interfaces, packages and also their methods, fields, and constructors.
All these built-in classes give benefits to the programmer.  A user interface offers the basic user interaction between user and computer; in the same manner, the API works as an application program interface that gives connection amongst the software as well as the consumer. API includes classes and packages which usually assist a programmer in minimizing the lines of a program.
some API's are: GraphQL, Rest, Restassured, SaopUI.

Does java support multiple inheritance? Why or why not?
Answer:Java does not support multiple inheritance.a class cannot extend more than one class. Multiple inheritances lead to ambiguity.
Consider a case where class B extends class A and Class C and both class A and C have the same method display().
Now java compiler cannot decide, which display method it should inherit. To prevent such situation, multiple inheritances is not allowed in java.

What is method overloading and when does it happen?
Answer:If a class of a Java program has a plural number of methods, and all of them have the same name but different parameters (with a change in type or number of arguments), and programmers can use them to perform a similar form of functions, then it is known as method overloading. If programmers what to perform one operation, having the same name, the method increases the readability if the program.
Method Overloading is applied in a program when objects are required to perform similar tasks but different input parameters. Every time an object calls a method, Java matches up to the method name first and then the number and type of parameters to decide what definitions to execute. This process of assigning multiple tasks to the same method is known as Polymorphism. There are different ways to overload a method in Java. They are:
Based on the number of parameters: In this case, the entire overloading concept depends on the number of parameters that are placed within the parenthesis of the method.
Based on the data type of the parameter: With the arrangement of data type, within the parameter, overloading of the method can take place.
Based on the sequence of data types in parameters: The method overloading also depends on the ordering of data types of parameters within the method.
To create overloaded methods, programmers need to develop several different method definitions in the class, all have the same name, but the parameters list is different

Explain exceptions in java and how to handle them.
Answer:Exception is an abnormal condition.In Java, an exception is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime.
There are mainly two types of exceptions: checked and unchecked. An error is considered as the unchecked exception. However, according to Oracle, there are three types of exceptions namely:
-Checked Exception
-Unchecked Exception
-Error
Exception Handling is a mechanism to handle runtime errors such as ClassNotFoundException, IOException, SQLException, RemoteException, etc.

333.
What is static keyword? When and how do we use it?
Answer:The Static Modifier
       Static Variables
       The static keyword is used to create variables that will exist independently of any instances created for the class. Only one copy of the static variable exists regardless of the number of instances of the class.
       Static variables are also known as class variables. Local variables cannot be declared static.
        Static Methods
       The static keyword is used to create methods that will exist independently of any instances created for the class.
       Static methods do not use any instance variables of any object of the class they are defined in. Static methods take all the data from parameters and compute something from those parameters, with no reference to variables.
       Class variables and methods can be accessed using the class name followed by a dot and the name of the variable or method.
The main feature of using the static keyword is, when a component of a class is marked with the static keyword, it belongs only to the class and not to the objects of the class.

What is final keyword? When and how do we use it?
Answer:The main feature of the final keyword is that when anything marked with the final keyword is initialized to a value, this initialized value cannot be changed i.e. the value becomes final or a constant value.

       We can use the final keyword to mark a -:
       Local variable:A local variable is declared within a method. Once a local variable declared with the final keyword is initialized with a value, you can't change that value. Although, if you still go ahead and assign a new value to a final local variable, it causes a compile error
       Instance variable:Once a value is given to the final instance variable of a class, you cannot change its value. Although, if you still go ahead and give a new value to the instance variable of a class, it causes a compile error.
       Method:Once a method is declared final in a class, it cannot be redefined or overridden by a subclass. But if we still try to override or give a new definition to a final method of a class, the compiler will throw a compile error
       Class:Once a class is declared final, you cannot extend it. In other words, declaring a class final prevents it from being inherited by another class.

Explain the difference between final, finally and finalize?
Answer:

What is a constructor?
Answer:A constructor is used to create an object of a class using the new keyword, where an object is also known as an instance of a class. Each object of a class will have its own state (instance variables) and access to methods of its class.

       Some important features of a constructor are -
       A constructor always must have the same name as the class.
       A constructor cannot have a return type.
       A constructor may have any access modifier like private, protected, default, public.
       A constructor is never inherited or overridden as it's not an instance method.

Can we have multiple constructors in a class?
Answer:A class can have multiple constructors with different types of arguments and different number of arguments.

If we don't have a constructor declared, what is called during the object creation?
Answer: if there is no constructor available in the class It calls a default constructor, Java compiler provides a default constructor by default.

What is "this" keyword in Java? When would we use it?
Answer:this is a reference variable that refers to the current object.
this can be used to refer current class instance variable.
this can be used to invoke current class method (implicitly)
this() can be used to invoke current class constructor.
this can be passed as an argument in the method call.
this can be passed as argument in the constructor call.
this can be used to return the current class instance from the method.

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:Super keyword in Java is a reference variable used to refer to the immediate parent class(superclass) object. The super keyword in Java is used when we want to acquire a superclass member and use it in a derived class. When an instance of the child class is created, an instance of the superclass is also created.
       The super keyword in Java comes into play with the concept of inheritance. So it is important to have a basic understanding of inheritance.
       The super keyword in Java is used in the following scenarios:
       super can be used to refer to a variable of the immediate parent class
       super can be used to invoke the immediate parent class method.
       super() can be used to access the immediate parent class constructor.
       Let’s discuss each application of super keywords in detail with examples.

What does JVM stand for?
Answer:Java Virtual Machine

Is JVM platform independent?
Answer:JVM (Java virtual machine) is platform dependant while java language is platform independent. Jvm is one kind of interface or middleware between OS (Operating Systems) and java language.Jvm provides thd environment to execute the java file (. Class file). So at the end it's depends on your kernel. And kernel is differ from OS to OS.

What version of Java are you using?
Answer: java version "11.0.12" 2021-07-20 LTS

What does JAR stand for?
Answer:Java Runtime Environment

What is the difference between JDK and JVM?
Answer:
The full form of JDK is Java Development Kit./The full form of JVM is Java Virtual Machine.
JDK is a software development kit to develop applications in Java./JVM executes Java byte code and provides an environment for executing it.
JDK is platform dependent./JVM is platform-independent.
It contains tools for developing, debugging, and monitoring java code./Software development tools are not included in JVM.
It is the superset of JRE./JVM is a subset of JRE.
The JDK enables developers to create Java programs that can be executed and run by the JRE and JVM./It is the Java platform component that executes source code.
JDK comes with the installer.
What is the difference between JVM and JRE?
Answer:
The full form of JDK is Java Development Kit.	The full form of JRE is Java Runtime Environment.
JDK is a software development kit to develop applications in Java.	It is a software bundle which provides Java class libraries with necessary components to run Java code.
JDK is platform dependent.	JRE is also platform dependent.
It contains tools for developing, debugging, and monitoring java code.	It contains class libraries and other supporting files that JVM requires to execute the program.
It is the superset of JRE	It is the subset of JDK.
The JDK enables developers to create Java programs that can be executed and run by the JRE and JVM.	The JRE is the part of Java that creates the JVM.
JDK comes with the installer.	JRE only contain environment to execute source code.

Explain the difference between compile-time and run-time?
Answer:compile-time is putting a code together
       run-time is when running the code

What is heap?
Answer:Heap is an area in the memory where the created objects goes.it is also called Grabage -collectible heap.

How does Java manage its memory?
Answer:the memory is managed automatically by the garbage collector. the garbage collector frees the memory in a regular period,the memory that is not used for long time.so that the garbage collector is used as an automatically managed memory.

What is the difference between String, StringBuffer and StringBuilder?
Answer:
The String class represent character strings that is a sequence of characters together. A few methods included in this class are: charAt() method which takes an integer as input and will return the character at that location in the String object. compareTo() method compares two String objects and will return true if both the objects are the same. In this method the strings are case sensitive. The other method compareToIgnoreCase() will work exactly the same way as the previous one, but will ignore the casing of the characters in the string, which means they do consider characters of either upper case and lower case the same.
The StringBuffer class holds a mutable sequence of characters which means, the characters in this object can be changed. It contains some particular sequence of characters, but the length and content of the sequence can be changed through certain method calls. Every StringBuffer object has a capacity. By default it will have a capacity of 16 characters. The append() method of this class is polymorphic. It takes multiple form, and is used to append the Boolean values, characters, strings, and subsets of strings to the existing object. The charAt() method works the same as it does in the String class. The capacity() method returns the current capacity of the StringBuffer object.
The StringBuilder class also holds a mutable sequence of characters whereas it provides an API compatible with StringBuffer, but with no guarantee of synchronization. The append(), size(), charAt() methods works the same as it does in the StringBuffer class.

What is Singleton class?
Answer:one object to create, one copy of any instance of class available.

What is Serialization and Deserialization?
Answer:Serialization is a process in which the state of an object is converted into a byte stream,

       On the other hand, convert byte stream back to class object is known as DeSerialization

Explain the difference between While and Do..While loops?
Answer:the differenсe between them: In while lоор, соnditiоn is evаluаted first аnd then the stаtements inside lоор bоdy gets exeсuted, оn the оther hаnd in dо-while lоор, stаtements inside dо-while gets exeсuted first аnd then the соnditiоn is evаluаted.
       The if stаtement аlоne tells us thаt if а соnditiоn is true it will exeсute а blосk оf stаtements аnd if the соnditiоn is fаlse it wоn’t. We саn use the else stаtement with if stаtement tо exeсute а blосk оf соde when the соnditiоn is fаlse.

What is Enum?
Answer: Enum is a data type, it is not an object, Enums are holding constance, Enums are extanding inside the class but not outside.

What is Iterator?
Answer:An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet. It is called an "iterator" because "iterating" is the technical term for looping.

Which one will take more memory: an int or Integer? Why?
Answer:An Integer object will take more memory,an Integer is an object, it  stores meta data overhead about the object and int is primitive type so its takes less space.
Integer is an object which takes 128 bits (16 bytes) to store its int value.int is a primitive data type and takes 32 bits(4 bytes) to store.

Why are Strings considered to be immutable in Java?
Answer:The string is immutable means that we cannot change the object itself, but we can change the reference to the object. The string is made final to not allow others to extend it and destroy its immutability.
Security Parameters are typically represented as String in network connections, database connection URLs, usernames/passwords, etc. If it was mutable, these parameters could be changed easily.
Synchronization and Concurrency making String immutable automatically makes them thread safe thereby solving the synchronization issues.
Caching when compiler optimizes our String objects, it seems that if two objects have the same value (a =" test", and b =" test") and thus we need only one string object (for both a and b, these two will point to the same object).
Class loading String is used as arguments for class loading. If mutable, it could result in the wrong class being loaded (because mutable objects change their state).

What is constructor chaining in Java?
Answer:Constructor chaining is the process of calling one constructor from another constructor with respect to current object.
       Constructor chaining can be done in two ways:
        Within same class: It can be done using this() keyword for constructors in same class
        From base class: by using super() keyword to call constructor from the base class.

The difference between Serial and Parallel Garbage Collector?
Answer:Serial Garbage Collector: This is the simplest GC implementation, as it basically works with a single thread. If we select Serial garbage collector as our default garbage collector then whenever we will call garbage collector to clean unused memory then serial garbage collector holds all the running threads of application i.e. It works by freezing all the application threads and It will create a single thread to perform garbage collection. It freezes all other running threads of application until garbage collection operations have concluded. If we use Serial Garbage Collector as our default garbage collector then the application throughput will decrease and application pause time will increase. As a result, this GC implementation freezes all application threads when it runs. Hence, it is not a good idea to use it in multi-threaded applications like server environments.
Parallel Garbage Collector: Parallel Garbage Collector is the default garbage collector in Java 8. It is also known as Throughput collector. Parallel Garbage Collector is same as Serial Garbage Collector because Parallel Garbage Collector also freezes the running threads of the application while performing the garbage collection. But the difference is, Parallel Garbage Collector uses multiple threads to perform cleaning of unused heap area.
What does JIT stands for?
Answer:Just In Time compiler

Explain the process of Java garbage collection?
Answer:Garbage Collection in Java is a process by which the programs perform memory management automatically. The Garbage Collector(GC) finds the unused objects and deletes them to reclaim the memory. In Java, dynamic memory allocation of objects is achieved using the new operator that uses some memory and the memory remains allocated until there are references for the use of the object.
When there are no references to an object, it is assumed to be no longer needed, and the memory, occupied by the object can be reclaimed. There is no explicit need to destroy an object as Java handles the de-allocation automatically.
The technique that accomplishes this is known as Garbage Collection. Programs that do not de-allocate memory can eventually crash when there is no memory left in the system to allocate. These programs are said to have memory leaks.

Can you guarantee the garbage collection process?
Answer:No, Garbage collection does not guarantee that a program will not run out of memory.

What is the difference between stack and heap in Java?
Answer: It is managed by Java automatically. The JVM divides the memory into two parts: stack memory and heap memory. From the perspective of Java, both are important memory areas but both are used for different purposes. The major difference between Stack memory and heap memory is that the stack is used to store the order of method execution and local variables while the heap memory stores the objects and it uses dynamic memory allocation and deallocation. In this section, we will discuss the differences between stack and heap in detail.

What is reflection in Java and why is it useful?
Answer:Reflection is a feature in the Java programming language. It allows an executing Java program to examine or "introspect" upon itself, and manipulate internal properties of the program. For example, it's possible for a Java class to obtain the names of all its members and display them. The ability to examine and manipulate a Java class from within itself may not sound like very much, but in other programming languages this feature simply doesn't exist. For example, there is no way in a Pascal, C, or C++ program to obtain information about the functions defined within that program.
One tangible use of reflection is in JavaBeans, where software components can be manipulated visually via a builder tool. The tool uses reflection to obtain the properties of Java components (classes) as they are dynamically loaded.

What is multithreading in Java?
Answer:Multithreading in Java is a process of executing two or more threads simultaneously to maximum utilization of CPU. Multithreaded applications execute two or more threads run concurrently. Hence, it is also known as Concurrency in Java. Each thread runs parallel to each other. Mulitple threads don’t allocate separate memory area, hence they save memory. Also, context switching between threads takes less time.

What is synchronization in Java?
Answer:Synchronization in Java is the capability to control the access of multiple threads to any shared resource.
       Java Synchronization is better option where we want to allow only one thread to access the shared resource.
The synchronization is mainly used to prevent thread interference.To prevent consistency problem.
There are two types of synchronization: Process Synchronization- Thread Synchronization

What is a Framework?
Answer:Java Framework is the body or platform of pre-written codes used by Java developers to develop Java applications or web applications. In other words, Java Framework is a collection of predefined classes and functions that is used to process input, manage hardware devices interacts with system software. It acts like a skeleton that helps the developer to develop an application by writing their own code.
Some of the most popular Java frameworks are:
Spring
Hibernate
Grails
Play
JavaServer Faces (JSF)
Google Web Toolkit (GWT)
Quarkus

What are the testing Frameworks available in Java?
Answer:A framework describes a set of principles or guidelines that we can follow to accomplish the required outcomes in a systematic manner. The JAVA / J2EE apps and server elements can be tested in numerous ways, and for that, testing frameworks are available.
Many are intended for unit or functional testing, while others are used for particular Java kinds of parts like viewing, logic, and validation. The benefit of using Testing Frameworks is that it increases testing speed and improves efficiency, and maintains accuracy throughout the process. It not only reduces the risks but also reduces the cost of test maintenance. Here in this article, we are going to see Testing Frameworks available for Java.

What are jUnit and testNG?
Answer:JUnit and TestNG are the most popular testing frameworks for Java applications. Both of these frameworks are easy to use. So when it comes to chose the testing framework for your application, it’s better to have a high-level idea of what features are present in one or the other and then take the informed decision based on your project requirements.

What are the dependencies for this project?
Answer:ependencies are quick solutions with convenient packaging. They are modules which provide specific functionality. For example, the Azure Storage Blobs package is a solution for managing your data on Azure cloud, which you can use in your project. You could rely on multiple such libraries, but there is a price to pay. You will need to manage them in your project.

What is dependency injection in Java?
Answer:Any application is composed of many objects that collaborate with each other to perform some useful stuff. Traditionally each object is responsible for obtaining its own references to the dependent objects (dependencies) it collaborate with. This leads to highly coupled classes and hard-to-test code.
For example, consider a Car object. A Car depends on Wheels, Engine, Fuel, Battery, etc to run. Traditionally we define the brand of such dependent objects along with the definition of the Car object.

Explain what static binding and dynamic binding is?
Answer:Static Binding: The binding which can be resolved at compile time by compiler is known as static or early binding. Binding of all the static, private and final methods is done at compile-time .
